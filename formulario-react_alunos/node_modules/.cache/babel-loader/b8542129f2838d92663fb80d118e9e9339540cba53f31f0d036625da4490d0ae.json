{"ast":null,"code":"var _s = $RefreshSig$();\n// Importa o React e os hooks necessários do React\nimport React, { useState } from 'react';\n// Importa o hook useFrom do react-hook-form para lidar com formulários de maneira eficiente\n// Obs: Para instalar (npm  install react-hook-form)\nimport { useForm } from 'react-hook-form';\n// Importa o arquivo de estilos CSS\nimport '../css/style.css';\n// Importa a imagem de fundo do login\nimport minhaImagem from '../images/login.jpg';\n// Importa a imagem de verificação\nimport verified from '../images/verified.png';\n\n// Função principal que representa o componente do formulário\nfunction MyForm() {\n  _s();\n  // Destruturação do objeto retornado pelo hook useForm\n  // formState é um objeto que contém o estado do formulário, e errors é uma propriedade desse objeto\n  const {\n    register,\n    handleSubmit,\n    fromState: {\n      errors\n    }\n  } = useForm();\n  // Estado local para constrolar o estado do formulário\n  const [status, setStatus] = useState({\n    submittedSuccessfully: false,\n    loading: false,\n    showPassword: false\n  });\n\n  // Função que é chamada quando o formulário é enviado\n  const onSubmit = data => {\n    // { ...status }: O operador de propagação (...) é utilizado para criar uma cópia do estado atual (status). Isso é feito para garantir que não estamos modificando diretamente o estado anterior, respeitando o princípio de imutabilidade no React.\n    setStatus({\n      ...status,\n      loading: true\n    }); // Atualiza o estado para indicar que está carregando\n\n    // Simula um tempo de espera antes de atualizar o estado para o sucesso\n    setTimeout(() => {\n      setStatus({\n        submittedSuccessfully: true,\n        loading: false\n      });\n    }, 1000);\n  };\n\n  // Função para gerar mensagens \n}\n_s(MyForm, \"HO73RT4DqjNXZTRjv+afyB7LDsY=\", false, function () {\n  return [useForm];\n});\n_c = MyForm;\nvar _c;\n$RefreshReg$(_c, \"MyForm\");","map":{"version":3,"names":["React","useState","useForm","minhaImagem","verified","MyForm","_s","register","handleSubmit","fromState","errors","status","setStatus","submittedSuccessfully","loading","showPassword","onSubmit","data","setTimeout","_c","$RefreshReg$"],"sources":["C:/Users/DEV_2ano_2024/Documents/GitHub/react-exemplos-sesi/formulario-react_alunos/src/components/forms/form.js"],"sourcesContent":["// Importa o React e os hooks necessários do React\nimport React, { useState } from 'react';\n// Importa o hook useFrom do react-hook-form para lidar com formulários de maneira eficiente\n// Obs: Para instalar (npm  install react-hook-form)\nimport { useForm } from 'react-hook-form';\n// Importa o arquivo de estilos CSS\nimport '../css/style.css';\n// Importa a imagem de fundo do login\nimport minhaImagem from '../images/login.jpg';\n// Importa a imagem de verificação\nimport verified from '../images/verified.png';\n\n// Função principal que representa o componente do formulário\nfunction MyForm() {\n    // Destruturação do objeto retornado pelo hook useForm\n    // formState é um objeto que contém o estado do formulário, e errors é uma propriedade desse objeto\n    const { register, handleSubmit, fromState: { errors } } = useForm();\n    // Estado local para constrolar o estado do formulário\n    const [status, setStatus] = useState({ submittedSuccessfully: false, loading: false, showPassword: false});\n\n    // Função que é chamada quando o formulário é enviado\n    const onSubmit = data => {\n        // { ...status }: O operador de propagação (...) é utilizado para criar uma cópia do estado atual (status). Isso é feito para garantir que não estamos modificando diretamente o estado anterior, respeitando o princípio de imutabilidade no React.\n        setStatus({ ...status, loading: true }); // Atualiza o estado para indicar que está carregando\n\n        // Simula um tempo de espera antes de atualizar o estado para o sucesso\n        setTimeout(() => {\n            setStatus({ submittedSuccessfully: true, loading: false });\n        }, 1000);\n    };\n\n    // Função para gerar mensagens \n}"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC;AACA;AACA,SAASC,OAAO,QAAQ,iBAAiB;AACzC;AACA,OAAO,kBAAkB;AACzB;AACA,OAAOC,WAAW,MAAM,qBAAqB;AAC7C;AACA,OAAOC,QAAQ,MAAM,wBAAwB;;AAE7C;AACA,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EACd;EACA;EACA,MAAM;IAAEC,QAAQ;IAAEC,YAAY;IAAEC,SAAS,EAAE;MAAEC;IAAO;EAAE,CAAC,GAAGR,OAAO,CAAC,CAAC;EACnE;EACA,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAAC;IAAEY,qBAAqB,EAAE,KAAK;IAAEC,OAAO,EAAE,KAAK;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAC;;EAE1G;EACA,MAAMC,QAAQ,GAAGC,IAAI,IAAI;IACrB;IACAL,SAAS,CAAC;MAAE,GAAGD,MAAM;MAAEG,OAAO,EAAE;IAAK,CAAC,CAAC,CAAC,CAAC;;IAEzC;IACAI,UAAU,CAAC,MAAM;MACbN,SAAS,CAAC;QAAEC,qBAAqB,EAAE,IAAI;QAAEC,OAAO,EAAE;MAAM,CAAC,CAAC;IAC9D,CAAC,EAAE,IAAI,CAAC;EACZ,CAAC;;EAED;AACJ;AAACR,EAAA,CAnBQD,MAAM;EAAA,QAG+CH,OAAO;AAAA;AAAAiB,EAAA,GAH5Dd,MAAM;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}